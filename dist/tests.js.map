{"version":3,"sources":["../tests/index.ts","../src/math.ts"],"sourcesContent":["import { test } from 'uvu';\r\nimport * as assert from 'uvu/assert';\r\nimport { getPermutations } from '../src/math';\r\n\r\ntest('True is true', async () => {\r\n  assert.equal(getPermutations(1), '1');\r\n  assert.equal(getPermutations(2), '4');\r\n  assert.equal(getPermutations(3), '15');\r\n  assert.equal(getPermutations(5), '325');\r\n  assert.equal(getPermutations(7), '13699');\r\n  assert.equal(getPermutations(11), '108505111');\r\n  assert.equal(getPermutations(13), '16926797485');\r\n  assert.equal(getPermutations(17), '966858672404688');\r\n  assert.equal(getPermutations(19), '330665665962403970');\r\n});\r\n\r\ntest.run();\r\n","import BigNumber from 'bignumber.js';\r\n\r\nconst PI = new BigNumber(Math.PI);\r\nconst E = new BigNumber(Math.E);\r\nconst TWO = new BigNumber(2);\r\nconst ONE = new BigNumber(1);\r\n\r\n/**\r\n *\r\n */\r\nfunction stirlingApproximation(n: BigNumber) {\r\n  if (n.isEqualTo(1)) {\r\n    return ONE;\r\n  }\r\n\r\n  const left = n.times(PI).times(TWO).sqrt();\r\n  const right = n.dividedBy(E).pow(n);\r\n  const product = left.times(right);\r\n  console.log(product);\r\n  return product;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction* factorial(n: BigNumber): Generator<BigNumber> {\r\n  let result = ONE;\r\n  for (let i = new BigNumber(2); i.lte(n); i = i.plus(1)) {\r\n    result = result.times(i);\r\n    yield result;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction floor(n: BigNumber) {\r\n  return n.integerValue(BigNumber.ROUND_FLOOR);\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport function getPermutations(n: number) {\r\n  const N = new BigNumber(n);\r\n  let factor;\r\n\r\n  const factorialGenerator = factorial(N);\r\n  factor = factorialGenerator.next();\r\n\r\n  while (!factor.done) {\r\n    factor = factorialGenerator.next();\r\n  }\r\n\r\n  const eTimesNFactorial = E.times(factor.value);\r\n  const result = floor(eTimesNFactorial).minus(1);\r\n\r\n  if (n > 20) {\r\n    return result.toExponential(3);\r\n  } else {\r\n    return result.toString();\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAqB;AACrB,aAAwB;;;ACDxB,uBAAsB;AAEtB,IAAM,KAAK,IAAI,iBAAAA,QAAU,KAAK,EAAE;AAChC,IAAM,IAAI,IAAI,iBAAAA,QAAU,KAAK,CAAC;AAC9B,IAAM,MAAM,IAAI,iBAAAA,QAAU,CAAC;AAC3B,IAAM,MAAM,IAAI,iBAAAA,QAAU,CAAC;AAoB3B,UAAU,UAAU,GAAoC;AACtD,MAAI,SAAS;AACb,WAAS,IAAI,IAAI,iBAAAC,QAAU,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE,KAAK,CAAC,GAAG;AACtD,aAAS,OAAO,MAAM,CAAC;AACvB,UAAM;AAAA,EACR;AACA,SAAO;AACT;AAKA,SAAS,MAAM,GAAc;AAC3B,SAAO,EAAE,aAAa,iBAAAA,QAAU,WAAW;AAC7C;AAKO,SAAS,gBAAgB,GAAW;AACzC,QAAM,IAAI,IAAI,iBAAAA,QAAU,CAAC;AACzB,MAAI;AAEJ,QAAM,qBAAqB,UAAU,CAAC;AACtC,WAAS,mBAAmB,KAAK;AAEjC,SAAO,CAAC,OAAO,MAAM;AACnB,aAAS,mBAAmB,KAAK;AAAA,EACnC;AAEA,QAAM,mBAAmB,EAAE,MAAM,OAAO,KAAK;AAC7C,QAAM,SAAS,MAAM,gBAAgB,EAAE,MAAM,CAAC;AAE9C,MAAI,IAAI,IAAI;AACV,WAAO,OAAO,cAAc,CAAC;AAAA,EAC/B,OAAO;AACL,WAAO,OAAO,SAAS;AAAA,EACzB;AACF;;;ID3DA,iBAAK,gBAAgB,YAAY;AAC/B,EAAO,aAAM,gBAAgB,CAAC,GAAG,GAAG;AACpC,EAAO,aAAM,gBAAgB,CAAC,GAAG,GAAG;AACpC,EAAO,aAAM,gBAAgB,CAAC,GAAG,IAAI;AACrC,EAAO,aAAM,gBAAgB,CAAC,GAAG,KAAK;AACtC,EAAO,aAAM,gBAAgB,CAAC,GAAG,OAAO;AACxC,EAAO,aAAM,gBAAgB,EAAE,GAAG,WAAW;AAC7C,EAAO,aAAM,gBAAgB,EAAE,GAAG,aAAa;AAC/C,EAAO,aAAM,gBAAgB,EAAE,GAAG,iBAAiB;AACnD,EAAO,aAAM,gBAAgB,EAAE,GAAG,oBAAoB;AACxD,CAAC;AAED,gBAAK,IAAI;","names":["BigNumber","BigNumber"]}